1.comparator:
public static List< List< Integer > > mergeOverlappingIntervals(int [][]arr){
        int n = arr.length;
        Arrays.sort(arr, new Comparator<int[]>() {
            public int compare(int[] a, int[] b){
                return a[0] - b[0];
            }
        });
        List<List<Integer>> ans = new ArrayList<>();
        for(int i =0; i<n; i++){
            if(ans.size() == 0 || arr[i][0] > ans.get(ans.size()-1).get(1)){
                 ans.add(Arrays.asList(arr[i][0], arr[i][1]));
            }else{
                ans.get(ans.size()-1).set(1, Math.max(ans.get(ans.size()-1).get(1),arr[i][1]));
            }
        }return ans;
    }
2. lambda fun:
public int[][] merge(int[][] intervals) {
        List<int[]> res = new ArrayList<>();
        if(intervals.length == 0 || intervals == null)
        return res.toArray(new int[0][]);
        Arrays.sort(intervals,(a,b)->a[0]-b[0]);
        int start = intervals[0][0];
        int end = intervals[0][1];
        for(int[] i : intervals){
            if(i[0] <= end){
                end = Math.max(end, i[1]);
            }
            else{
                res.add(new int[]{start, end});
                start = i[0];
                end = i[1];
            }
        }
        res.add(new int[]{start,end});
        return res.toArray(new int[0][]);
    }
3. codestudio custom class sort:
class Interval {
        int start, int finish;

        Interval(int start, int finish) {
            this.start = start;
            this.finish = finish;
        }
    }
public class Solution {
    public static List<Interval> mergeIntervals(Interval[] intervals) {
        List<Interval> ans = new ArrayList<>();
        Arrays.sort(intervals,new Comparator<Interval>(){
            public int compare(Interval p1, Interval p2) {
                if(p1.start == p2.start) {
                    return p1.finish - p2.finish;
                }
                return p1.start - p2.start;
            }
        });
        for(Interval i: intervals){
            int first = i.start;
            int second = i.finish;
            if(ans.size()==0 || ans.get(ans.size()-1).finish < first){
                ans.add(new Interval(first, second));
            }else{
                int max = Math.max(ans.get(ans.size()-1).finish, second);
                Interval p = new Interval(ans.get(ans.size()-1).start, max);
                ans.set(ans.size()-1, p);
            }
        } 
        return ans;
    }
}