import java.util.* ;
import java.io.*; 
public class Solution {
    public static int merge(long arr[], int l, int m, int r)
    {
        ArrayList<Long> temp = new ArrayList<>();
        int left = l;
        int right = m + 1;
         int cnt = 0;
        while (left <= m && right <= r) {
            if (arr[left] <= arr[right]) {
                temp.add(arr[left]);
                left++;
            } else {
                temp.add(arr[right]);
                cnt += (m - left + 1);
                right++;
            }
        }
        while (left <= m) {
            temp.add(arr[left]);
            left++;
        }
        while (right <= r) {
            temp.add(arr[right]);
            right++;
        }
        for (int i = l; i <= r; i++) {
            arr[i] = temp.get(i - l);
        }
         return cnt; 
    }
    public static int mergeSort(long[] arr, int start, int end){
        int cnt = 0;
        if(start>=end) return cnt;
        int mid = (start+end)/2;
        cnt+=mergeSort(arr,start,mid);
        cnt+=mergeSort(arr, mid+1, end);
        cnt+=merge(arr,start, mid, end);
        return cnt;
    }
    public static long getInversions(long arr[], int n) {
        return mergeSort(arr,0,n-1);
    }
}